/*
<metadata 
        description="Send XYZ from up to 3 touch points; map to your DAW on the fly without Dashboard!" 
         details="Send XYZ from up to 3 touch points, easily mappable in your DAW using the Mode button as a shift-function to assign individual points' axes from a 3x3 grid. Roli Dashboard is only required to assign CC numbers to axes; you DON'T have to alt-tab back and forth between Dashboard and your DAW just to map/learn controls!" 
         target="Lightpad" 
         tags="MIDI;Controller;" 
         canEmbedModes="false">
    <modes>
        <mode name="Default">
        </mode>
    </modes>

    <groups>
        <group name="Global" displayName="Global" />
        <group name="PadAX" displayName="Pad A axis X" />
        <group name="PadAY" displayName="Pad A axis Y" />
        <group name="PadAZ" displayName="Pad A axis Z" />
        <group name="PadBX" displayName="Pad B axis X" />
        <group name="PadBY" displayName="Pad B axis Y" />
        <group name="PadBZ" displayName="Pad B axis Z" />
        <group name="PressureBar" displayName="Pressure Bar" />
        <group name="XAssign" displayName="X Assign" />
        <group name="YAssign" displayName="Y Assign" />
        <group name="ZAssign" displayName="Z Assign" />
        <group name="X2Assign" displayName="X2 Assign" />
        <group name="Y2Assign" displayName="Y2 Assign" />
        <group name="Z2Assign" displayName="Z2 Assign" />
        <group name="XYPads" displayName="XY Pads" />
    </groups>

    <variables>
        

        

        <variable name="channel" group="Global" displayName="MIDI channel" type="int" value="1" min="0" max="16" displayMode="menu" tooltip="Which MIDI channel to transmit on" />
        /// Main XYZ point colour
        <variable name="colour" group="Global" displayName="Touch Color" type="colour" value="0x4AC8CA"  tooltip="Color of the touch heat map" />                
        /// Secondary XYZ point colour
        <variable name="colour2" group="Global" displayName="Secondary Color" type="colour" value="0xE5FFFB"  tooltip="Color of the secondary touch" />
        /// Tertiary XYZ point colour
        <variable name="colour3" group="Global" displayName="Tertiary Color" type="colour" value="0xEB1ECD"  tooltip="Color of the secondary touch" />
        <variable name="backgroundColour" group="Global" displayName="Background Color" type="colour" value="0x551963" tooltip="Color of the pad fill" />
        <variable name="ccTextColour" group="Global" displayName="CC Text Colour" type="colour" value="0xFFFF00"  tooltip="Color of the text displaying the CC being assigned" />
        <variable name="toggleSens" group="Global" displayName="Mapping Mode Sensitivity" type="int" min="1" max="90" value="10" displayMode="stepper" tooltip="The velocity required to toggle assignment mode by striking the top-left corner of the Lightpad" />
        
        <vector count="2" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable name="ccX" group="XYPads" displayName="X CC" type="int" min="0" max="127" value="111" displayMode="stepper" tooltip="The MIDI CC that is sent for this pad's X axis"/>
            <variable name="modeX" group="XYPads" displayName="X mode" type="option" options="Normal;Inverted;Bipolar" value="Bipolar" tooltip="Whether this axis should be normal, bipolar or inverted" />
            <variable name="releaseX" group="XYPads" displayName="X release" type="option" options="Hold;Spring" value="Spring" tooltip="Whether releasing this axis should result in a default 'reset' value being sent" />
            <variable name="lerpX" group="XYPads" displayName="X return time" type="int" min="0" max="10000" value="120" tooltip="Time in milliseconds for this axis to return to default in Spring release mode. Default is 0 for Normal, 64 for Bipolar and 127 for Inverted" />

            <variable name="ccY" group="XYPads" displayName="Y CC" type="int" min="0" max="127" value="112" displayMode="stepper" tooltip="The MIDI CC that is sent for this pad's Y axis"/>
            <variable name="modeY" group="XYPads" displayName="Y mode" type="option" options="Normal;Inverted;Bipolar" value="Normal" tooltip="Whether this axis should be normal, bipolar or inverted" />
            <variable name="releaseY" group="XYPads" displayName="Y release" type="option" options="Hold;Spring" value="Hold" tooltip="Whether releasing this axis should result in a default 'reset' value being sent" />
            <variable name="lerpY" group="XYPads" displayName="Y return time" type="int" min="0" max="10000" value="120" tooltip="Time in milliseconds for this axis to return to default in Spring release mode. Default is 0 for Normal, 64 for Bipolar and 127 for Inverted" />

            <variable name="ccZ" group="XYPads" displayName="Z CC" type="int" min="0" max="127" value="113" displayMode="stepper" tooltip="The MIDI CC that is sent for Pad A's Z axis"/>
            <variable name="modeZ" group="XYPads" displayName="Z mode" type="option" options="Normal;Inverted;Binary" value="Normal" tooltip="Whether this axis should be normal, inverted or binary" />

        </vector>

        <variable name="padAccX" group="PadAX" displayName="Pad A: cc X" type="int" min="0" max="127" value="111" displayMode="stepper" tooltip="The MIDI CC that is sent for Pad A's X axis"/>
        <variable name="PadAmodeX" group="PadAX" displayName="Pad A: X mode" type="option" options="Normal;Inverted;Bipolar" value="Bipolar" tooltip="Whether this axis should be normal, bipolar or inverted" />
        <variable name="PadAreleaseX" group="PadAX" displayName="Pad A: X release" type="option" options="Hold;Spring" value="Spring" tooltip="Whether releasing this axis should result in a default 'reset' value being sent" />
        <variable name="PadAlerpX" group="PadAX" displayName="Pad A: X return time" type="int" min="0" max="10000" value="120" tooltip="Time in milliseconds for this axis to return to default in Spring release mode. Default is 0 for Normal, 64 for Bipolar and 127 for Inverted" />

        <variable name="padAccY" group="PadAY" displayName="Pad A: cc Y" type="int" min="0" max="127" value="112" displayMode="stepper" tooltip="The MIDI CC that is sent for Pad A's Y axis"/>
        <variable name="PadAmodeY" group="PadAY" displayName="Pad A: Y mode" type="option" options="Normal;Inverted;Bipolar" value="Normal" tooltip="Whether this axis should be normal, bipolar or inverted" />
        <variable name="PadAreleaseY" group="PadAY" displayName="Pad A: Y release" type="option" options="Hold;Spring" value="Hold" tooltip="Whether releasing this axis should result in a default 'reset' value being sent" />
        <variable name="PadAlerpY" group="PadAY" displayName="Pad A: Y return time" type="int" min="0" max="10000" value="120" tooltip="Time in milliseconds for this axis to return to default in Spring release mode. Default is 0 for Normal, 64 for Bipolar and 127 for Inverted" />

        <variable name="padAccZ" group="PadAZ" displayName="Pad A: cc Z" type="int" min="0" max="127" value="113" displayMode="stepper" tooltip="The MIDI CC that is sent for Pad A's Z axis"/>
        <variable name="PadAmodeZ" group="PadAZ" displayName="Pad A: Z mode" type="option" options="Normal;Inverted" value="Normal" tooltip="Whether this axis should be normal or inverted" />




        <variable name="padBccX" group="PadBX" displayName="Pad B: cc X" type="int" min="0" max="127" value="114" displayMode="stepper" tooltip="The MIDI CC that is sent for Pad A's X axis"/>
        <variable name="PadBmodeX" group="PadBX" displayName="Pad B: X mode" type="option" options="Normal;Inverted;Bipolar" value="Bipolar" tooltip="Whether this axis should be normal, bipolar or inverted" />
        <variable name="PadBreleaseX" group="PadBX" displayName="Pad B: X release" type="option" options="Hold;Spring" value="Spring" tooltip="Whether releasing this axis should result in a default 'reset' value being sent" />
        <variable name="PadBlerpX" group="PadBX" displayName="Pad B: X return time" type="int" min="0" max="10000" value="120" tooltip="Time in milliseconds for this axis to return to default in Spring release mode. Default is 0 for Normal, 64 for Bipolar and 127 for Inverted" />

        <variable name="padBccY" group="PadBY" displayName="Pad B: cc Y" type="int" min="0" max="127" value="115" displayMode="stepper" tooltip="The MIDI CC that is sent for Pad A's Y axis"/>
        <variable name="PadBmodeY" group="PadBY" displayName="Pad B: Y mode" type="option" options="Normal;Inverted;Bipolar" value="Normal" tooltip="Whether this axis should be normal, bipolar or inverted" />
        <variable name="PadBreleaseY" group="PadBY" displayName="Pad B: Y release" type="option" options="Hold;Spring" value="Hold" tooltip="Whether releasing this axis should result in a default 'reset' value being sent" />
        <variable name="PadBlerpY" group="PadBY" displayName="Pad B: Y return time" type="int" min="0" max="10000" value="120" tooltip="Time in milliseconds for this axis to return to default in Spring release mode. Default is 0 for Normal, 64 for Bipolar and 127 for Inverted" />

        <variable name="padBccZ" group="PadBZ" displayName="Pad B: cc Z" type="int" min="0" max="127" value="116" displayMode="stepper" tooltip="The MIDI CC that is sent for Pad A's Z axis"/>
        <variable name="PadBmodeZ" group="PadBZ" displayName="Pad B: Z mode" type="option" options="Normal;Inverted" value="Normal" tooltip="Whether this axis should be normal or inverted" />


        <variable name="pressureBarZ" group="PressureBar" displayName="Pressure CC" type="int" min="0" max="127" value="117" displayMode="stepper" tooltip="The MIDI CC that is sent for the pressure bar's Z axis"/>        
        <variable name="pressureBarmodeZ" group="PressureBar" displayName="Pressure Bar: Z mode" type="option" options="Normal;Inverted;Binary" value="Normal" tooltip="Whether this axis should be normal, inverted or binary" />

        /// Assignment colours/bgcolours
        <variable name="colourX" group="XAssign" displayName="X Touch Color" type="colour" value="0xEC4646"  tooltip="Color of the touch heat map when assigning X" visible="false" />        


        <vector count="3" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable name="zoneX1" type="int" value="0" visible="false" />
            <variable name="zoneY1" type="int" value="0" visible="false" />
            <variable name="zoneX2" type="int" value="0" visible="false" />
            <variable name="zoneY2" type="int" value="0" visible="false" />
        </vector>

    </variables>
</metadata>

TO DO:
        
    Interpolated spring returns probably require a rewrite of all the mode code in the touch event; it'll probably
    all need to be done in the redraw loop with some checks to see if work is necessary - the touch event will just
    update/override the current MIDI value and flip a flag or reset a timer.

    Need to reintroduce binary mode for the pressure bar, at least.

Notes:
    Metadata types: https://forum.juce.com/t/global-array-support-for-littlefoot/32394/5

*/
bool gammaCorrected;
bool modeButtonDown; // Are we in Mapping Mode?
int lastMillisCount; // Used to calculate Delta time
int fadeMillis; // How many milliseconds should it take for a zone background to fade out?
int fadeCounters[4]; // Stores fadeout counters (milliseconds) for zones 1-4
int zoneCount;
int entryZones[5][4]; // Stores a zone for touch indices 1 to 5, -1 for unassigned
float zonePressure[4];
int zoneXMidiValue[4]; // 0-127. We store these in case we need to lerp after release
int zoneYMidiValue[4]; // 0-127. We store these in case we need to lerp after release
bool touchDown[5]; // Stores a 'down' state for touch indices 1 to 5

void initialise()
{
	for (int i = 0; i < 32; ++i)
        setLocalConfigActiveState (i, false, false);

    setLocalConfig (33, 1);
    gammaCorrected = getLocalConfig (33) > 0;
    modeButtonDown = false;    
    lastMillisCount = 0;    
    fadeMillis = 1000;    

    for(int i = 0; i < 4; i++)
    {
        fadeCounters[i] = fadeMillis;
    }

    // Define our zones    
    zoneCount = 3;
    // We use these autogenerated setters/getters in conjunction with the metadata vector because 2d arrays 
    // aren't initialised properly in this function. Not sure why.
    
    setZoneX1(0, 0);
    setZoneY1(0, 0);
    setZoneX2(0, 7);
    setZoneY2(0, 12);

    setZoneX1(1, 8);
    setZoneY1(1, 0);
    setZoneX2(1, 14);
    setZoneY2(1, 12);

    setZoneX1(2, 0);
    setZoneY1(2, 13);
    setZoneX2(2, 14);
    setZoneY2(2, 14);

    for(int i = 0; i < 5; i++)
    {
        for(int k = 0; k < 4; k++)
        {
            entryZones[i][k] = -1;
        }
    }

    for(int i = 0; i < 5; i++)
    {
        touchDown[i] = false;
    }
}

// When developing with just ROLI Dashboard (not Blocks or VS++), this is a quick way of seeing some integer values in a DAW
void debugCC(int chan, int val1, int val2, int val3, int val4)
{
    sendCC (chan, 2, val1);
    sendCC (chan, 3, val2);
    sendCC (chan, 4, val3);
    sendCC (chan, 5, val4);
}

// Returns the index of a zone if the incoming coordinates fall within that zone; otherwise returns -1
int checkZone(float x, float y)
{
    
    // Grid zone checks can be low resolution (0-14) 
    int xLedPos =  int(map(x, 0.07, 1.93, 0.0, 14.0));
    int yLedPos = int(map(y, 0.07, 1.93, 0.0, 14.0));    
    int outZone = -1;

    for (int i = 0; i < zoneCount; i++)
    {        
        //debugCC(10, xpos, ypos, width, height);

        if( (xLedPos >= getZoneX1(i)) 
            && (xLedPos <= getZoneX2(i)) 
            && (yLedPos >= getZoneY1(i))
            && (yLedPos <= getZoneY2(i)) 
        ) 
        {
            outZone = i;    
        }
        
    }

    return outZone;
}

// Using the Lightpad's Mode button as a shift key: when down, we can assign X, Y and Z axes for Main, Secondary and Tertiary touch points
// one by one. Touching a box on the assignment grid displays the CC number currently mapped to that point/axis, and sends continuous messages
// with that CC number to be mapped/learned within a DAW.
void handleButtonDown(int index)
{
    modeButtonDown = true;
}

void handleButtonUp(int index)
{    
    modeButtonDown = false;
}

void repaint()
{    
    int DeltaTime = getMillisecondCounter() - lastMillisCount;
    lastMillisCount = getMillisecondCounter();

    for(int f = 0; f < 4; f++)
    {
        if(fadeCounters[f] > 0)
        {
            fadeCounters[f] -= DeltaTime;
            fadeCounters[f] = max(fadeCounters[f], 0);
        }
    }


    clearDisplay(backgroundColour);
    if(modeButtonDown)
    {
        // TOP ROW
        fillRect( colour3, 0, 1, 7, 3);
        fillRect( colour3, 8, 1, 7, 3);
        

        // SECOND ROW
        fillRect( colour, 0, 5, 7, 3);
        fillRect( colour, 8, 5, 7, 3);
        

        // THIRD ROW

        fillRect( colour2, 0, 9, 7, 3);
        fillRect( colour2, 8, 9, 7, 3);
        

        // Pressure/pitch
        blendGradientRect(0xff144956, colour, colour2, colour2, 0, 13, 8, 14);
        blendGradientRect(colour, 0xff144956, colour2, colour2, 7, 13, 8, 14);
    }
    else
    {
        
        int startR = (colour3 >> 16) & 0XFF;
        int startG = (colour3 >> 8) & 0XFF;
        int startB = (colour3) & 0XFF;
        
        int endR = (colour2 >> 16) & 0xFF;
        int endG = (colour2 >> 8) & 0xFF;
        int endB = (colour2) & 0xFF;

        int zonePressA = 0;//int(zonePressure[0] * 127.0);

        int startA1 = int((fadeCounters[0] * 255) / 1000.0);
        startA1 += zonePressA;
        int endA1 = int((fadeCounters[0] * 255) / 1000.0);
        endA1 += zonePressA;
        int startCol1 = makeARGB(startA1, startR, startG, startB);
        int endCol1 = makeARGB(endA1, endR, endG, endB);

        int zonePressB = 0;//int(zonePressure[1] * 127.0);

        int startA2 = int((fadeCounters[1] * 255) / 1000.0);
        startA2 += zonePressB;
        int endA2 = int((fadeCounters[1] * 255) / 1000.0);
        endA2 += zonePressB;
        int startCol2 = makeARGB(startA2, startR, startG, startB);
        int endCol2 = makeARGB(endA2, endR, endG, endB);
        

        // Two X/Y faders
        blendGradientRect(startCol1, startCol1, endCol1, endCol1, 0, 0, 7, 12);
        blendGradientRect(startCol2, startCol2, endCol2, endCol2, 8, 0, 7, 12);

        // Pressure/pitch
        blendGradientRect(0xff144956, colour, colour2, colour2, 0, 13, 8, 14);
        blendGradientRect(colour, 0xff144956, colour2, colour2, 7, 13, 8, 14);

        //drawNumber(int((fadeCounters[0] * 255) / 1000.0), colour2, 0, 0);       

    }

    drawPressureMap();
    fadePressureMap();    
        
         
}

float lerp(float a, float b, float t)
{
    return b + (a - b) * t;
}

int mapTouchToRange (float v, float inMin, float inMax, float outMax)
{
    return int (map (v, inMin / 100.0, inMax / 100.0, 0.0, outMax));
}

void outputCC (float v, int cc, float inMin, float inMax, bool invert)
{
    int value = mapTouchToRange (v, inMin, inMax, 127.0);
    if (invert)
        value = 127 - value;
    
    sendCC ((channel - 1), cc, value);
}

void handleTouch (int index, float x, float y, float z, float scale, bool IsTouchEnd)
{
    
	// Grid zone checks can be low resolution (0-14) 
    int xLedPos =  int(map(x, 0.07, 1.93, 0.0, 14.0));
    int yLedPos = int(map(y, 0.07, 1.93, 0.0, 14.0));    

    // Control (normal) mode
    if(!modeButtonDown)
    {
         if(entryZones[index] >= 0 && touchDown[index])
            {
                // This index was in a zone, so we should reset the corresponding fade timer
                fadeCounters[entryZones[index]] = fadeMillis;
            }

            // Calculate accurate x/y values for MIDI output that are constrained to this finger's starting zone
            float xMin = map(float(getZoneX1(entryZones[index])), 0.0, 14.0, 0.07, 1.93);
            float xMax = map(float(getZoneX2(entryZones[index])-1), 0.0, 14.0, 0.07, 1.93);
            float yMin = map(float(getZoneY1(entryZones[index])), 0.0, 14.0, 0.07, 1.93);
            float yMax = map(float(getZoneY2(entryZones[index])-1), 0.0, 14.0, 0.07, 1.93);

            x = clamp(xMin, xMax, x);
            y = clamp(yMin, yMax, y);

                

            zonePressure[entryZones[index]] = z;            
            zoneXMidiValue[entryZones[index]] = int(map(x, xMin, xMax, 0.0, 127.0));
            zoneYMidiValue[entryZones[index]] = 127 - int(map(y, yMin, yMax, 0.0, 127.0));            

            bool CueRelease = false;
            if(IsTouchEnd)
            {
                CueRelease = true;
                
            }


            int padIdx = entryZones[index];

            // X
            if(CueRelease)
            {                                   
                if(getReleaseX(padIdx) == 0) // Hold
                {
                    sendCC((channel-1), getCcX(padIdx), zoneXMidiValue[entryZones[index]]);                        
                }
                else if(getReleaseX(padIdx) == 1) // Spring
                {
                    if(getModeX(padIdx) == 0) sendCC((channel-1), getCcX(padIdx), 0); // Normal
                    if(getModeX(padIdx) == 1) sendCC((channel-1), getCcX(padIdx), 127); // Inverted
                    if(getModeX(padIdx) == 2) sendCC((channel-1), getCcX(padIdx), 63); // Bipolar
                }
            }
            else
            {
                if(getModeX(padIdx) == 0) sendCC((channel-1), getCcX(padIdx), zoneXMidiValue[entryZones[index]]); // Normal
                if(getModeX(padIdx) == 1) sendCC((channel-1), getCcX(padIdx), 127 - zoneXMidiValue[entryZones[index]]); // Inverted
                if(getModeX(padIdx) == 2) sendCC((channel-1), getCcX(padIdx), 64 + (zoneXMidiValue[entryZones[index]] - 64)); // Bipolar
            }
            
            // Y
            
            if(CueRelease)
            {                                   
                if(getReleaseY(padIdx) == 0) // Hold
                {
                    sendCC((channel-1), getCcY(padIdx), zoneYMidiValue[entryZones[index]]);                        
                }
                else if(getReleaseY(padIdx) == 1) // Spring
                {
                    if(getModeY(padIdx) == 0) sendCC((channel-1), getCcY(padIdx), 0); // Normal
                    if(getModeY(padIdx) == 1) sendCC((channel-1), getCcY(padIdx), 127); // Inverted
                    if(getModeY(padIdx) == 2) sendCC((channel-1), getCcY(padIdx), 63); // Bipolar
                }
            }
            else
            {
                if(getModeY(padIdx) == 0) sendCC((channel-1), getCcY(padIdx), zoneYMidiValue[entryZones[index]]); // Normal
                if(getModeY(padIdx) == 1) sendCC((channel-1), getCcY(padIdx), 127 - zoneYMidiValue[entryZones[index]]); // Inverted
                if(getModeY(padIdx) == 2) sendCC((channel-1), getCcY(padIdx), 64 + (zoneYMidiValue[entryZones[index]] - 64)); // Bipolar
            }


            // Z    
            if(getModeZ(padIdx) == 0)
            {
                sendCC((channel-1), getCcZ(padIdx), int(z * 127.0)); // Normal
            }
            else if(getModeZ(padIdx) == 1)
            {
                sendCC((channel-1), getCcZ(padIdx), 127 - int(z * 127.0)); // Inverted
            }
            
            addPressurePoint (colour, x, y, z * scale);  




























            /*
            // PAD A
            if(entryZones[index] == 0)
            {

                // X
                if(CueRelease)
                {                                   
                    if(PadAreleaseX == 0) // Hold
                    {
                        sendCC((channel-1), padAccX, zoneXMidiValue[entryZones[index]]);                        
                    }
                    else if(PadAreleaseX == 1) // Spring
                    {
                        if(PadAmodeX == 0) sendCC((channel-1), padAccX, 0); // Normal
                        if(PadAmodeX == 1) sendCC((channel-1), padAccX, 127); // Inverted
                        if(PadAmodeX == 2) sendCC((channel-1), padAccX, 63); // Bipolar
                    }
                }
                else
                {
                    if(PadAmodeX == 0) sendCC((channel-1), padAccX, zoneXMidiValue[entryZones[index]]); // Normal
                    if(PadAmodeX == 1) sendCC((channel-1), padAccX, 127 - zoneXMidiValue[entryZones[index]]); // Inverted
                    if(PadAmodeX == 2) sendCC((channel-1), padAccX, 64 + (zoneXMidiValue[entryZones[index]] - 64)); // Bipolar
                }
                
                // Y
                
                if(CueRelease)
                {
                    
                    if(PadAreleaseY == 0) // Hold
                    {
                        sendCC((channel-1), padAccY, zoneYMidiValue[entryZones[index]]);
                    }
                    else if(PadAreleaseY == 1) // Spring
                    {
                        if(PadAmodeY == 0) sendCC((channel-1), padAccY, 0); // Normal
                        if(PadAmodeY == 1) sendCC((channel-1), padAccY, 127); // Inverted
                        if(PadAmodeY == 2) sendCC((channel-1), padAccY, 63); // Bipolar
                    }
                }
                else
                {
                    if(PadAmodeY == 0) sendCC((channel-1), padAccY, zoneYMidiValue[entryZones[index]]); // Normal
                    if(PadAmodeY == 1) sendCC((channel-1), padAccY, 127 - zoneYMidiValue[entryZones[index]]); // Inverted
                    if(PadAmodeY == 2) sendCC((channel-1), padAccY, 64 + (zoneYMidiValue[entryZones[index]] - 64)); // Bipolar
                }


                // Z    
                if(PadAmodeZ == 0)
                {
                    sendCC((channel-1), padAccZ, int(z * 127.0)); // Normal
                }
                else if(PadAmodeZ == 1)
                {
                    sendCC((channel-1), padAccZ, 127 - int(z * 127.0)); // Inverted
                }
                
                addPressurePoint (colour, x, y, z * scale);        
            }

            // PAD B
            if(entryZones[index] == 1)
            {
                 // X
                if(CueRelease)
                {                                   
                    if(PadBreleaseX == 0) // Hold
                    {
                        sendCC((channel-1), padBccX, zoneXMidiValue[entryZones[index]]);                        
                    }
                    else if(PadBreleaseX == 1) // Spring
                    {
                        if(PadBmodeX == 0) sendCC((channel-1), padBccX, 0); // Normal
                        if(PadBmodeX == 1) sendCC((channel-1), padBccX, 127); // Inverted
                        if(PadBmodeX == 2) sendCC((channel-1), padBccX, 63); // Bipolar
                    }
                }
                else
                {
                    if(PadBmodeX == 0) sendCC((channel-1), padBccX, zoneXMidiValue[entryZones[index]]); // Normal
                    if(PadBmodeX == 1) sendCC((channel-1), padBccX, 127 - zoneXMidiValue[entryZones[index]]); // Inverted
                    if(PadBmodeX == 2) sendCC((channel-1), padBccX, 64 + (zoneXMidiValue[entryZones[index]] - 64)); // Bipolar
                }
                
                // Y
                
                if(CueRelease)
                {
                    
                    if(PadBreleaseY == 0) // Hold
                    {
                        sendCC((channel-1), padBccY, zoneYMidiValue[entryZones[index]]);
                    }
                    else if(PadBreleaseY == 1) // Spring
                    {
                        if(PadBmodeY == 0) sendCC((channel-1), padBccY, 0); // Normal
                        if(PadBmodeY == 1) sendCC((channel-1), padBccY, 127); // Inverted
                        if(PadBmodeY == 2) sendCC((channel-1), padBccY, 63); // Bipolar
                    }
                }
                else
                {
                    if(PadBmodeY == 0) sendCC((channel-1), padBccY, zoneYMidiValue[entryZones[index]]); // Normal
                    if(PadBmodeY == 1) sendCC((channel-1), padBccY, 127 - zoneYMidiValue[entryZones[index]]); // Inverted
                    if(PadBmodeY == 2) sendCC((channel-1), padBccY, 64 + (zoneYMidiValue[entryZones[index]] - 64)); // Bipolar
                }


                // Z    
                if(PadBmodeZ == 0)
                {
                    sendCC((channel-1), padBccZ, int(z * 127.0)); // Normal
                }
                else if(PadBmodeZ == 1)
                {
                    sendCC((channel-1), padBccZ, 127 - int(z * 127.0)); // Inverted
                }
                
                addPressurePoint (colour, x, y, z * scale);        
            }

            // PRESSURE BAR
            if(entryZones[index] == 2)
            {
                if(pressureBarmodeZ == 0) // Normal
                {
                    sendCC((channel-1), pressureBarZ, int(z * 127.0));
                }
                else if(pressureBarmodeZ == 1) // Inverted
                {
                    sendCC((channel-1), pressureBarZ, 127 - int(z * 127.0));
                }                  
                else if(pressureBarmodeZ == 2) // Binary
                {
                    if(z > 0.1)
                    {
                        sendCC((channel-1), pressureBarZ, 127);
                    }
                    else
                    {
                        sendCC((channel-1), pressureBarZ, 0);
                    }
                }           
                
                addPressurePoint (colour2, x, y, z * scale);        
            }     
            */   
    }
    // Mapping Mode
    else
    {
        // Top row
        if( yLedPos < 4) 
        {
            if(xLedPos < 7)
            {
                
                drawNumber(int(padAccX), ccTextColour, 0, 0);
                addPressurePoint(colourX, x, y, z * scale);
                outputCC (x, padAccX, 7.0, 193.0, false);
            }            
            else
            {
                drawNumber(int(padBccX), ccTextColour, 0, 0);
                addPressurePoint(colourX, x, y, z * scale);
                outputCC (z, padBccX, 0.0, 100.0, false);
            }        
        }
        // Middle row
        else if( yLedPos < 8)
        {
            if(xLedPos < 7)
            {
                
                drawNumber(int(padAccY), ccTextColour, 0, 0);
                addPressurePoint(colourX, x, y, z * scale);
                outputCC (x, padAccY, 7.0, 193.0, false);
            }            
            else
            {
                drawNumber(int(padBccY), ccTextColour, 0, 0);
                addPressurePoint(colourX, x, y, z * scale);
                outputCC (z, padBccY, 0.0, 100.0, false);
            }        
        }
        // third row
        else if( yLedPos < 12)
        {
            if(xLedPos < 7)
            {
                
                drawNumber(int(padAccZ), ccTextColour, 0, 0);
                addPressurePoint(colourX, x, y, z * scale);
                outputCC (x, padAccZ, 7.0, 193.0, false);
            }            
            else
            {
                drawNumber(int(padBccZ), ccTextColour, 0, 0);
                addPressurePoint(colourX, x, y, z * scale);
                outputCC (z, padBccZ, 0.0, 100.0, false);
            }        
        }
        // Bottom row
        else
        {
                drawNumber(int(pressureBarZ), ccTextColour, 0, 0);
                addPressurePoint(colourX, x, y, z * scale);
                outputCC (y, pressureBarZ, 7.0, 193.0, true);     
        }

    }
    
}

void touchStart (int index, float x, float y, float z, float vz)
{        

    // Grid zone checks can be low resolution (0-14) 
    int xLedPos =  int(map(x, 0.07, 1.93, 0.0, 14.0));
    int yLedPos = int(map(y, 0.07, 1.93, 0.0, 14.0));    
    int vval = int(vz * 100);

    // Top left
    if(xLedPos <= 0 && yLedPos <= 0)
    {
        //drawNumber(vval, ccTextColour, 0, 0);
        if(vval >= toggleSens)
        {
            modeButtonDown = !modeButtonDown;
        }
        
    }

    // We only track up to 5 fingers
    if(index < 5)
    {        
        touchDown[index] = true;
        entryZones[index] = checkZone(x,y);
    }
    

    handleTouch (index, x, y, z, 75.0, false);
}

void touchMove (int index, float x, float y, float z, float vz)
{        
    
    handleTouch (index, x, y, z, 20.0, false);
}

void touchEnd (int index, float x, float y, float z, float vz)
{
    handleTouch (index, x, y, z, vz, true);
    if(index < 5)
    {
        if(entryZones[index] >= 0 && touchDown[index])
        {
            // This index was in a zone, so we should start the corresponding fadeout
            fadeCounters[entryZones[index]] = fadeMillis;
        }

        touchDown[index] = false; // then release the touchDown...
        entryZones[index] = -1; // and invalidate the zone index
    }

    

}


/*
    This defines the 'pixel' grid for the App preview thumbnail in ROLI Dashboard.
    I used Brian Wang's BLOCKS playground (https://wangpy.github.io/blocks-playground/) to convert an image into canvas data, which I then 
    kludged into the following pixel data by means of this hurriedly scrawled JS: https://jsfiddle.net/yog9qtsa/. I'd set the top 5 and
    bottom 5 rows to black, so only needed to convert the middle 5. Some regexp find/replace-fu was required in VS Code. This is not a robust workflow!    
*/

/*
<display backgroundColour="0xFFE8486B" textColour ="0xFF000000">
    <pixels>
        /// 15 Bottom row, left to right
        <pixel index="0" colour="0xff000000" />
        <pixel index="1" colour="0xff000000" />
        <pixel index="2" colour="0xff000000" />
        <pixel index="3" colour="0xff000000" />
        <pixel index="4" colour="0xff000000" />
        <pixel index="5" colour="0xff000000" />
        <pixel index="6" colour="0xff000000" />
        <pixel index="7" colour="0xff000000" />
        <pixel index="8" colour="0xff000000" />
        <pixel index="9" colour="0xff000000" />
        <pixel index="10" colour="0xff000000" />
        <pixel index="11" colour="0xff000000" />
        <pixel index="12" colour="0xff000000" />
        <pixel index="13" colour="0xff000000" />
        <pixel index="14" colour="0xff000000" />
        /// 14 Second bottom row, left to right [etc]
        <pixel index="15" colour="0xff000000" />
        <pixel index="16" colour="0xff000000" />
        <pixel index="17" colour="0xff000000" />
        <pixel index="18" colour="0xff000000" />
        <pixel index="19" colour="0xff000000" />
        <pixel index="20" colour="0xff000000" />
        <pixel index="21" colour="0xff000000" />
        <pixel index="22" colour="0xff000000" />
        <pixel index="23" colour="0xff000000" />
        <pixel index="24" colour="0xff000000" />
        <pixel index="25" colour="0xff000000" />
        <pixel index="26" colour="0xff000000" />
        <pixel index="27" colour="0xff000000" />
        <pixel index="28" colour="0xff000000" />
        <pixel index="29" colour="0xff000000" />
        /// 13
        <pixel index="30" colour="0xff000000" />
        <pixel index="31" colour="0xff000000" />
        <pixel index="32" colour="0xff000000" />
        <pixel index="33" colour="0xff000000" />
        <pixel index="34" colour="0xff000000" />
        <pixel index="35" colour="0xff000000" />
        <pixel index="36" colour="0xff000000" />
        <pixel index="37" colour="0xff000000" />
        <pixel index="38" colour="0xff000000" />
        <pixel index="39" colour="0xff000000" />
        <pixel index="40" colour="0xff000000" />
        <pixel index="41" colour="0xff000000" />
        <pixel index="42" colour="0xff000000" />
        <pixel index="43" colour="0xff000000" />
        <pixel index="44" colour="0xff000000" />
        /// 12
        <pixel index="45" colour="0xff000000" />
        <pixel index="46" colour="0xff000000" />
        <pixel index="47" colour="0xff000000" />
        <pixel index="48" colour="0xff000000" />
        <pixel index="49" colour="0xff000000" />
        <pixel index="50" colour="0xff000000" />
        <pixel index="51" colour="0xff000000" />
        <pixel index="52" colour="0xff000000" />
        <pixel index="53" colour="0xff000000" />
        <pixel index="54" colour="0xff000000" />
        <pixel index="55" colour="0xff000000" />
        <pixel index="56" colour="0xff000000" />
        <pixel index="57" colour="0xff000000" />
        <pixel index="58" colour="0xff000000" />
        <pixel index="59" colour="0xff000000" />
        /// 11
        <pixel index="60" colour="0xff000000" />
        <pixel index="61" colour="0xff000000" />
        <pixel index="62" colour="0xff000000" />
        <pixel index="63" colour="0xff000000" />
        <pixel index="64" colour="0xff000000" />
        <pixel index="65" colour="0xff000000" />
        <pixel index="66" colour="0xff000000" />
        <pixel index="67" colour="0xff000000" />
        <pixel index="68" colour="0xff000000" />
        <pixel index="69" colour="0xff000000" />
        <pixel index="70" colour="0xff000000" />
        <pixel index="71" colour="0xff000000" />
        <pixel index="72" colour="0xff000000" />
        <pixel index="73" colour="0xff000000" />
        <pixel index="74" colour="0xff000000" />
        /// 10  
        <pixel index="75" colour="0xffb6072"  />
<pixel index="76" colour="0xff86071" />
<pixel index="77" colour="0xfff4a56" />
<pixel index="78" colour="0xff181e28" />
<pixel index="79" colour="0xff19141e" />
<pixel index="80" colour="0xff1c131a" />
<pixel index="81" colour="0xff1f111a" />
<pixel index="82" colour="0xff22e16" />
<pixel index="83" colour="0xff23f13" />
<pixel index="84" colour="0xff261010" />
<pixel index="85" colour="0xff38282c" />
<pixel index="86" colour="0xff7d7b77" />
<pixel index="87" colour="0xffa19c95" />
<pixel index="88" colour="0xffa49c97" />
<pixel index="89" colour="0xffa89b96" />
<pixel index="90" colour="0xff144956" />
<pixel index="91" colour="0xff1c2f3a" />
<pixel index="92" colour="0xff1a1e28" />
<pixel index="93" colour="0xff1d1822" />
<pixel index="94" colour="0xff23191f" />
<pixel index="95" colour="0xff251820" />
<pixel index="96" colour="0xff23151e" />
<pixel index="97" colour="0xff26151b" />
<pixel index="98" colour="0xff281418" />
<pixel index="99" colour="0xff2a1516" />
<pixel index="100" colour="0xff554946" />
<pixel index="101" colour="0xff9d9591" />
<pixel index="102" colour="0xffa39096" />
<pixel index="103" colour="0xffa18c94" />
<pixel index="104" colour="0xffac8d9b" />
<pixel index="105" colour="0xff1c3641" />
<pixel index="106" colour="0xff1d1c27" />
<pixel index="107" colour="0xff201d27" />
<pixel index="108" colour="0xff373133" />
<pixel index="109" colour="0xff433e40" />
<pixel index="110" colour="0xff3e3537" />
<pixel index="111" colour="0xff30262c" />
<pixel index="112" colour="0xff69635c" />
<pixel index="113" colour="0xff625651" />
<pixel index="114" colour="0xff2c191d" />
<pixel index="115" colour="0xff412e32" />
<pixel index="116" colour="0xff7e7174" />
<pixel index="117" colour="0xff9a7d8f" />
<pixel index="118" colour="0xffa17591" />
<pixel index="119" colour="0xffa87395" />
<pixel index="120" colour="0xff272c34" />
<pixel index="121" colour="0xff241e29" />
<pixel index="122" colour="0xff444346" />
<pixel index="123" colour="0xff736f69" />
<pixel index="124" colour="0xff89847d" />
<pixel index="125" colour="0xff847571" />
<pixel index="126" colour="0xff625c5b" />
<pixel index="127" colour="0xffb09797" />
<pixel index="128" colour="0xffaf8a93" />
<pixel index="129" colour="0xff7d746f" />
<pixel index="130" colour="0xff736b6a" />
<pixel index="131" colour="0xff8b8183" />
<pixel index="132" colour="0xff99788d" />
<pixel index="133" colour="0xff9b658c" />
<pixel index="134" colour="0xff9e6388" />
<pixel index="135" colour="0xff373036" />
<pixel index="136" colour="0xff3f3640" />
<pixel index="137" colour="0xff82747b" />
<pixel index="138" colour="0xffab8f95" />
<pixel index="139" colour="0xffb7939b" />
<pixel index="140" colour="0xffba809b" />
<pixel index="141" colour="0xffa09792" />
<pixel index="142" colour="0xffbd759a" />
<pixel index="143" colour="0xffb66c96" />
<pixel index="144" colour="0xff9c6e89" />
<pixel index="145" colour="0xff917084" />
<pixel index="146" colour="0xff917087" />
<pixel index="147" colour="0xff955e88" />
<pixel index="148" colour="0xff985288" />
<pixel index="149" colour="0xff7c4560" />
<pixel index="75" colour="0xffb6072" />
<pixel index="76" colour="0xff86071" />
<pixel index="77" colour="0xfff4a56" />
<pixel index="78" colour="0xff181e28" />
<pixel index="79" colour="0xff19141e" />
<pixel index="80" colour="0xff1c131a" />
<pixel index="81" colour="0xff1f111a" />
<pixel index="82" colour="0xff22e16" />
<pixel index="83" colour="0xff23f13" />
<pixel index="84" colour="0xff261010" />
<pixel index="85" colour="0xff38282c" />
<pixel index="86" colour="0xff7d7b77" />
<pixel index="87" colour="0xffa19c95" />
<pixel index="88" colour="0xffa49c97" />
<pixel index="89" colour="0xffa89b96" />
<pixel index="90" colour="0xff144956" />
<pixel index="91" colour="0xff1c2f3a" />
<pixel index="92" colour="0xff1a1e28" />
<pixel index="93" colour="0xff1d1822" />
<pixel index="94" colour="0xff23191f" />
<pixel index="95" colour="0xff251820" />
<pixel index="96" colour="0xff23151e" />
<pixel index="97" colour="0xff26151b" />
<pixel index="98" colour="0xff281418" />
<pixel index="99" colour="0xff2a1516" />
<pixel index="100" colour="0xff554946" />
<pixel index="101" colour="0xff9d9591" />
<pixel index="102" colour="0xffa39096" />
<pixel index="103" colour="0xffa18c94" />
<pixel index="104" colour="0xffac8d9b" />
<pixel index="105" colour="0xff1c3641" />
<pixel index="106" colour="0xff1d1c27" />
<pixel index="107" colour="0xff201d27" />
<pixel index="108" colour="0xff373133" />
<pixel index="109" colour="0xff433e40" />
<pixel index="110" colour="0xff3e3537" />
<pixel index="111" colour="0xff30262c" />
<pixel index="112" colour="0xff69635c" />
<pixel index="113" colour="0xff625651" />
<pixel index="114" colour="0xff2c191d" />
<pixel index="115" colour="0xff412e32" />
<pixel index="116" colour="0xff7e7174" />
<pixel index="117" colour="0xff9a7d8f" />
<pixel index="118" colour="0xffa17591" />
<pixel index="119" colour="0xffa87395" />
<pixel index="120" colour="0xff272c34" />
<pixel index="121" colour="0xff241e29" />
<pixel index="122" colour="0xff444346" />
<pixel index="123" colour="0xff736f69" />
<pixel index="124" colour="0xff89847d" />
<pixel index="125" colour="0xff847571" />
<pixel index="126" colour="0xff625c5b" />
<pixel index="127" colour="0xffb09797" />
<pixel index="128" colour="0xffaf8a93" />
<pixel index="129" colour="0xff7d746f" />
<pixel index="130" colour="0xff736b6a" />
<pixel index="131" colour="0xff8b8183" />
<pixel index="132" colour="0xff99788d" />
<pixel index="133" colour="0xff9b658c" />
<pixel index="134" colour="0xff9e6388" />
<pixel index="135" colour="0xff373036" />
<pixel index="136" colour="0xff3f3640" />
<pixel index="137" colour="0xff82747b" />
<pixel index="138" colour="0xffab8f95" />
<pixel index="139" colour="0xffb7939b" />
<pixel index="140" colour="0xffba809b" />
<pixel index="141" colour="0xffa09792" />
<pixel index="142" colour="0xffbd759a" />
<pixel index="143" colour="0xffb66c96" />
<pixel index="144" colour="0xff9c6e89" />
<pixel index="145" colour="0xff917084" />
<pixel index="146" colour="0xff917087" />
<pixel index="147" colour="0xff955e88" />
<pixel index="148" colour="0xff985288" />
<pixel index="149" colour="0xff7c4560" />
        /// 5
        <pixel index="150" colour="0xff000000" />
        <pixel index="151" colour="0xff000000" />
        <pixel index="152" colour="0xff000000" />
        <pixel index="153" colour="0xff000000" />
        <pixel index="154" colour="0xff000000" />
        <pixel index="155" colour="0xff000000" />
        <pixel index="156" colour="0xff000000" />
        <pixel index="157" colour="0xff000000" />
        <pixel index="158" colour="0xff000000" />
        <pixel index="159" colour="0xff000000" />
        <pixel index="160" colour="0xff000000" />
        <pixel index="161" colour="0xff000000" />
        <pixel index="162" colour="0xff000000" />
        <pixel index="163" colour="0xff000000" />
        <pixel index="164" colour="0xff000000" />
        /// 4
        <pixel index="165" colour="0xff000000" />
        <pixel index="166" colour="0xff000000" />
        <pixel index="167" colour="0xff000000" />
        <pixel index="168" colour="0xff000000" />
        <pixel index="169" colour="0xff000000" />
        <pixel index="170" colour="0xff000000" />
        <pixel index="171" colour="0xff000000" />
        <pixel index="172" colour="0xff000000" />
        <pixel index="173" colour="0xff000000" />
        <pixel index="174" colour="0xff000000" />
        <pixel index="175" colour="0xff000000" />
        <pixel index="176" colour="0xff000000" />
        <pixel index="177" colour="0xff000000" />
        <pixel index="178" colour="0xff000000" />
        <pixel index="179" colour="0xff000000" />
        /// 3
        <pixel index="180" colour="0xff000000" />
        <pixel index="181" colour="0xff000000" />
        <pixel index="182" colour="0xff000000" />
        <pixel index="183" colour="0xff000000" />
        <pixel index="184" colour="0xff000000" />
        <pixel index="185" colour="0xff000000" />
        <pixel index="186" colour="0xff000000" />
        <pixel index="187" colour="0xff000000" />
        <pixel index="188" colour="0xff000000" />
        <pixel index="189" colour="0xff000000" />
        <pixel index="190" colour="0xff000000" />
        <pixel index="191" colour="0xff000000" />
        <pixel index="192" colour="0xff000000" />
        <pixel index="193" colour="0xff000000" />
        <pixel index="194" colour="0xff000000" />
        /// 2
        <pixel index="195" colour="0xff000000" />
        <pixel index="196" colour="0xff000000" />
        <pixel index="197" colour="0xff000000" />
        <pixel index="198" colour="0xff000000" />
        <pixel index="199" colour="0xff000000" />
        <pixel index="200" colour="0xff000000" />
        <pixel index="201" colour="0xff000000" />
        <pixel index="202" colour="0xff000000" />
        <pixel index="203" colour="0xff000000" />
        <pixel index="204" colour="0xff000000" />
        <pixel index="205" colour="0xff000000" />
        <pixel index="206" colour="0xff000000" />
        <pixel index="207" colour="0xff000000" />
        <pixel index="208" colour="0xff000000" />
        <pixel index="209" colour="0xff000000" />
        /// 1
        <pixel index="210" colour="0xff000000" />
        <pixel index="211" colour="0xff000000" />
        <pixel index="212" colour="0xff000000" />
        <pixel index="213" colour="0xff000000" />
        <pixel index="214" colour="0xff000000" />
        <pixel index="215" colour="0xff000000" />
        <pixel index="216" colour="0xff000000" />
        <pixel index="217" colour="0xff000000" />
        <pixel index="218" colour="0xff000000" />
        <pixel index="219" colour="0xff000000" />
        <pixel index="220" colour="0xff000000" />
        <pixel index="221" colour="0xff000000" />
        <pixel index="222" colour="0xff000000" />
        <pixel index="223" colour="0xff000000" />
        <pixel index="224" colour="0xff000000" />
    </pixels>
</display>
*/
